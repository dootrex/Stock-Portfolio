{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Avi\\\\Downloads\\\\Work\\\\stocky\\\\Stock-Portfolio\\\\pages\\\\stock.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport axios from \"axios\";\nimport Chart from \"../components/Chart\";\n\nvar Stock = function Stock(_ref) {\n  var stuff = _ref.stuff,\n      ticker = _ref.ticker,\n      name = _ref.name;\n  return __jsx(React.Fragment, null, __jsx(Chart, {\n    data: stuff,\n    ticker: ticker,\n    name: name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }));\n};\n\n_c = Stock;\n\nStock.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var query, res, data, xValue, yValue, stuff, key;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref2.query;\n            console.log(query.ticker);\n            _context.next = 4;\n            return axios.get(\"https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=\".concat(query.ticker, \"&interval=15min&apikey=V6PMYFQGMDIY3Y1P\"));\n\n          case 4:\n            res = _context.sent;\n            data = res.data;\n            xValue = [];\n            yValue = [];\n            stuff = [];\n\n            for (key in data[\"Time Series (15min)\"]) {\n              xValue.push(key);\n              yValue.push(data[\"Time Series (15min)\"][key][\"4. close\"]);\n              stuff.push({\n                x: key,\n                y: data[\"Time Series (15min)\"][key][\"4. close\"]\n              });\n            }\n\n            return _context.abrupt(\"return\", {\n              stuff: stuff,\n              ticker: query.ticker,\n              name: query.name\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default Stock;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stock\");","map":{"version":3,"sources":["C:/Users/Avi/Downloads/Work/stocky/Stock-Portfolio/pages/stock.js"],"names":["axios","Chart","Stock","stuff","ticker","name","getInitialProps","query","console","log","get","res","data","xValue","yValue","key","push","x","y"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;AAGA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAA4B;AAAA,MAAzBC,KAAyB,QAAzBA,KAAyB;AAAA,MAAlBC,MAAkB,QAAlBA,MAAkB;AAAA,MAAVC,IAAU,QAAVA,IAAU;AACxC,SACE,4BACE,MAAC,KAAD;AAAO,IAAA,IAAI,EAAEF,KAAb;AAAoB,IAAA,MAAM,EAAEC,MAA5B;AAAoC,IAAA,IAAI,EAAEC,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAND;;KAAMH,K;;AAONA,KAAK,CAACI,eAAN;AAAA,uEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,KAAT,SAASA,KAAT;AACtBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACH,MAAlB;AADsB;AAAA,mBAENJ,KAAK,CAACU,GAAN,kFAC4DH,KAAK,CAACH,MADlE,6CAFM;;AAAA;AAElBO,YAAAA,GAFkB;AAKhBC,YAAAA,IALgB,GAKTD,GAAG,CAACC,IALK;AAMlBC,YAAAA,MANkB,GAMT,EANS;AAOlBC,YAAAA,MAPkB,GAOT,EAPS;AAQlBX,YAAAA,KARkB,GAQV,EARU;;AAStB,iBAASY,GAAT,IAAgBH,IAAI,CAAC,qBAAD,CAApB,EAA6C;AAC3CC,cAAAA,MAAM,CAACG,IAAP,CAAYD,GAAZ;AACAD,cAAAA,MAAM,CAACE,IAAP,CAAYJ,IAAI,CAAC,qBAAD,CAAJ,CAA4BG,GAA5B,EAAiC,UAAjC,CAAZ;AACAZ,cAAAA,KAAK,CAACa,IAAN,CAAW;AAAEC,gBAAAA,CAAC,EAAEF,GAAL;AAAUG,gBAAAA,CAAC,EAAEN,IAAI,CAAC,qBAAD,CAAJ,CAA4BG,GAA5B,EAAiC,UAAjC;AAAb,eAAX;AACD;;AAbqB,6CAcf;AAAEZ,cAAAA,KAAK,EAAEA,KAAT;AAAgBC,cAAAA,MAAM,EAAEG,KAAK,CAACH,MAA9B;AAAsCC,cAAAA,IAAI,EAACE,KAAK,CAACF;AAAjD,aAde;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AAgBA,eAAeH,KAAf","sourcesContent":["import axios from \"axios\";\r\nimport Chart from \"../components/Chart\";\r\n\r\n\r\nconst Stock = ({ stuff, ticker, name}) => {\r\n  return (\r\n    <>\r\n      <Chart data={stuff} ticker={ticker} name={name} />\r\n    </>\r\n  );\r\n};\r\nStock.getInitialProps = async ({ query }) => {\r\n  console.log(query.ticker);\r\n  let res = await axios.get(\r\n    `https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${query.ticker}&interval=15min&apikey=V6PMYFQGMDIY3Y1P`\r\n  );\r\n  const data = res.data;\r\n  let xValue = [];\r\n  let yValue = [];\r\n  let stuff = [];\r\n  for (let key in data[\"Time Series (15min)\"]) {\r\n    xValue.push(key);\r\n    yValue.push(data[\"Time Series (15min)\"][key][\"4. close\"]);\r\n    stuff.push({ x: key, y: data[\"Time Series (15min)\"][key][\"4. close\"] });\r\n  }\r\n  return { stuff: stuff, ticker: query.ticker, name:query.name };\r\n};\r\nexport default Stock;\r\n"]},"metadata":{},"sourceType":"module"}